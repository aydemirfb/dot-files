#+TITLE:  Emacs Ayar Dosyası
#+AUTHOR: Fatma Basak Aydemir
#+EMAIL:  aydemir@disi.unitn.it

Bu dosya benim  [[http://www.orgmode.org][org-mode]] ile yazdığım  =.emacs= dosyam.

  - =tab= tuşu bölümleri açıp kapatır
  - =Shift= + =tab= ana taslak ile metin arasında geçiş yapar
  - =C-c C-v t= kullanarak  =~/.emacs-ext.el= dosyasını oluşturun
  -  =~/.emacs-ext.el= dosyasını  =.emacs= dosyanızdan aşağıdaki gibi yükleyin

#+BEGIN_EXAMPLE
  ;; Literate Programming ile oluşturduğunuz Dot Emacs dosyasını
  ;; yükleyin, kaynak: ~/work/dot-files/dot-emacs.org
  (load-file "~/.emacs-ext.el")
#+END_EXAMPLE

* Giriş

  Bu dosya Emacs ayarlar dosyamı oluşturan bir /betik/tir. Mac OS X 10.9 
  üzerinde Emacs 24 ile kullanmaktayım.

#+BEGIN_HTML
  <p>
    <a href="dot-emacs.org"> org-mode dosyasını</a> indirebilir veya  
    oluşturulmuş <a href="dot-emacs.el"> dosyasını inceleyebilirsiniz</a>.
  </p>
#+END_HTML

  Olusturulacak dosyanin elle degistirilmemesi icin bir uyari koyarak baslayalim. 

#+NAME: Note
#+BEGIN_SRC elisp :comments off
  ;;; ------------------------------------------
  ;;; Do not edit the generated file, as it has
  ;;; been generated, as a tangled file, by the
  ;;; fandifluous org-mode.
  ;;;
  ;;; Source: ~/work/dot-files/emacs.dotemacs.org
  ;;; ------------------------------------------
#+END_SRC
* Genel Ayarlar
** Pencere Boyutlari ve Yeri 
Emacs'i daima belli bir genislikte ve boyda kullaniyorum, acildigi zaman  ekranin solunda olmasini tercih ediyorum. 

#+BEGIN_SRC elisp
;;Pencere boyutu ve yeri
(setq default-frame-alist
      '((top . 20) (left . 2)
        (width . 80) (height . 52)
        ))
#+END_SRC

** Degiskenler
Kendimizi tanitalim
#+BEGIN_SRC elisp
;;Ben kimim :)
(setq user-full-name "Fatma Başak Aydemir")
(setq user-mail-address "aydemir@disi.unitn.it")
(setq user-website "http://www.disi.unitn.it/~aydemir") 
#+END_SRC

** Ekstra Paketler
 Ekstra paketleri : =$HOME/.emacs.d= dizinine kaydedelim. 
#+BEGIN_SRC elisp
(let ((default-directory "~/.emacs.d/elpa/"))
  (normal-top-level-add-to-load-path '("."))
  (normal-top-level-add-subdirs-to-load-path))
#+END_SRC
** Paket Yoneticisi
Ekstra repository'leri ekleyelim.
#+BEGIN_SRC elisp
   (require 'package)
   (require 'cl)
   (setq package-archives '(("org"      . "http://orgmode.org/elpa/")
                           ("gnu"       . "http://elpa.gnu.org/packages/")
                           ("melpa"     . "http://melpa.milkbox.net/packages/")
                           ("marmalade" . "http://marmalade-repo.org/packages/")))
#+END_SRC

#+BEGIN_SRC elisp
   (package-initialize)
#+END_SRC 

Asagida yuklendiginden emin olmak istedigimiz paketleri siraliyoruz.
#+BEGIN_SRC elisp
   (defvar aydemirfb/packages '(auctex
                          auto-complete
                          dot-mode
                          autopair
                          color-theme
                          color-theme-solarized
                          magit
                          marmalade
                          nlinum
                          org
                          paredit
                          popup
                          redo+
                          yasnippet)
  "Default packages")
#+END_SRC
Eger bu paketler icinden yuklenmeyen varsa yukleyelim.
#+BEGIN_SRC elisp
   (defun aydemirfb/packages-installed-p ( )
      (loop for pkg in aydemirfb/packages
         when (not (package-installed-p pkg)) do (return nil)
            finally (return t)))

   (unless (aydemirfb/packages-installed-p)
      (message "%s" "Refreshing package database...")
      (package-refresh-contents)
      (dolist (pkg aydemirfb/packages)
         (when (not (package-installed-p pkg))
            (package-install pkg))))
#+END_SRC
** Font Ayarlari
 Sozdizimi vurgusunu (syntax highlighting) kuresel yapalim.
#+BEGIN_SRC elisp
  (global-font-lock-mode 1)
#+END_SRC

Font secelim.
#+BEGIN_SRC elisp
  (set-default-font "Anonymous Pro")
  (set-face-attribute 'default nil :font "Anonymous Pro" :height 140)
  (set-face-font 'default "Anonymous Pro")
#+END_SRC

** Tema
Ben hazir temalardan solarized-light'i seviyorum. 
#+BEGIN_SRC elisp
  (require 'color-theme)
  (load-theme 'solarized-light t)
#+END_SRC 
** Satir durme
#+BEGIN_SRC elisp
(global-visual-line-mode 1)
#+END_SRC
** Tuslara atama yapalim
#+BEGIN_SRC elisp
  ;(load-library "line-move")
  (global-set-key (kbd "RET") 'newline-and-indent)
  (global-set-key (kbd "C-;") 'comment-or-uncomment-region)
  (global-set-key (kbd "M-/") 'hippie-expand)
#+END_SRC
** Cesitli Ayarlar
*** IDO
IDO'yu ozellikler dosya acarken seviyorum. 
#+BEGIN-SRC elisp 
   (setq ido-enable-flex-matching t)
   (setq ido-everywhere t)
   (ido-mode 1)
   (setq ido-use-virtual-buffers t)
   (setq ido-file-extensions-order '(".org" ".tex"))
   (setq completion-ignored-extensions (remove ".pdf" completion-ignored-extensions)) 
   (setq completion-ignored-extensions (remove ".dvi" completion-ignored-extensions)) 
#+END_SRC
*** Yedekleme Ayarlari
Yedekler calistigimiz dosyanin dizininde degil de tek bir dizinde toplansin.
#+BEGIN_SRC elisp
   (setq backup-directory-alist `(("." . "~/.saves")))
   (setq backup-by-copying t)
   (setq delete-old-versions t
     kept-new-versions 6
     kept-old-versions 2
     version-control t)
#+END_SRC
Her dosyanin yedegini alalim.
#+BEGIN_SRC elisp
  (setq vc-make-backup-files t)
#+END_SRC
*** Satir Numaralari
Satir numaralarini acip kapamak icin tus atayalim.
#+BEGIN_SRC elisp 
  (global-set-key (kbd "M-k") 'nlinum-mode)
#+END_SRC
*** Cubuklar
#+BEGIN_SRC elisp
(scroll-bar-mode -1) ;;No scroll-bar
(tool-bar-mode -1) ;; No tool bar
(menu-bar-mode 1) ;; Yes menu bar
#+END_SRC
*** Baslangic ekrani ve mesaji olmasin
#+BEGIN_SRC elisp
;; Send me straight to *scratch* when loading emacs
;; Send me to org-mode!
(setq inhibit-splash-screen t
      initial-scratch-message nil)

(when (locate-library "org")
  (setq initial-major-mode 'org-mode))(setq inhibit-startup-message t)
#+END_SRC
*** Yes or no yerine y or n
#+BEGIN_SRC elisp
   (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
*** Parantezleri goster
#+BEGIN_SRC elisp
(show-paren-mode 1)
#+END_SRC
*** Bos bir son satir ekleyelim
#+BEGIN_SRC elisp
(setq require-final-newline t)
#+END_SRC
*** autopair
Parantezleri eslestirelim.
#+BEGIN_SRC elisp 
(require 'autopair)
(autopair-global-mode) ;; to enable in all buffers
#+END_SRC
** Daha islevsel bir moderasyon cubugu icin
#+BEGIN_SRC elisp
(setq-default mode-line-format
	      (list
	       " -- "

	       ;; Modified shows *
	       "["
	       '(:eval
		 (if (buffer-modified-p)
		     "*"
		   (if buffer-read-only
		       "!"
		     " "
		     )))
	       "] "
	       
	       ;; Buffer (tooltip - file name)
	       '(:eval (propertize "%b" 'face 'bold 'help-echo (buffer-file-name)))
	       

	       " "
	       
	       ;; Spaces 20 - "buffer"
	       '(:eval
		 (make-string
		  (- 20
		     (min
		      20
		      (length (buffer-name))))
		  ?-))
	       
	       " "
	       ;; Current (row,column)
	       "("(propertize "%01l") "," (propertize "%01c") ") "
	       
	       ;; Spaces 7 - "(r,c)"
	       '(:eval
		 (make-string
		  (- 7
		     (min
		      4
		      (length (number-to-string (current-column)))
		      )
		     (min
		      3
		      (length (number-to-string (1+ (count-lines 1 (point)))))))
		  ?-))
	       
	       ;; Percentage of file traversed (current line/total lines)
	       " ["
	       '(:eval (number-to-string (/ (* (1+ (count-lines 1 (point))) 100) (count-lines 1 (point-max)))) )
	       "%%] "
	       
	       ;; Spaces 4 - %
	       '(:eval
		 (make-string
		  (- 4 (length (number-to-string (/ (* (count-lines 1 (point)) 100) (count-lines 1 (point-max))))))
		  ?-))
	       
	       ;; Major Mode
	       " [" '(:eval mode-name) "] "
	       
	       ;; Spaces 18 - %
	       '(:eval
		 (make-string
		  (- 18
		     (min
		      18
		      (length mode-name)))
		  ?-))
	       
	       " ("

	       ;; Time
	       '(:eval (propertize (format-time-string "%H:%M")
				   'help-echo
				   (concat (format-time-string "%c; ")
					   (emacs-uptime "Uptime:%hh"))))
	       
	       ;; Fill with '-'
	       ")"

	       ;; Spaces 13 - Battery info
	       (if (string= (user-full-name) "root") " --- [SUDO]")
	       " %-"
	       ))
#+END_SRC
** ispell nerede?
#+BEGIN_SRC elisp 
   (setq ispell-program-name "/opt/local/bin/aspell")
   (autoload 'flyspell-babel-setup "flyspell-babel")
   (add-hook 'latex-mode-hook 'flyspell-babel-setup)
#+END_SRC
** Otomatik Zaman Damgasi
#+BEGIN_SRC elisp
(setq 
  time-stamp-active t          ; zaman damgasini etkinlestir
  time-stamp-line-limit 10     ; ilk 10 satirda zaman damgasi ara 
  time-stamp-format "%04y-%02m-%02d %02H:%02M:%02S (%u)") ; tarih bicimi
(add-hook 'write-file-hooks 'time-stamp) ; dosyayi kaydederken guncelle
#+END_SRC
* AucTeX
** TeX path
#+BEGIN_SRC elisp
  (setenv "PATH" (concat "/usr/texbin:" (getenv "PATH")))
#+END_SRC
** PDF olustur
#+BEGIN_SRC elisp
(setq-default TeX-PDF-mode t)
#+END_SRC
** SyncTeX
#+BEGIN_SRC elisp
(add-hook 'LaTeX-mode-hook 'TeX-source-correlate-mode)

(setq TeX-source-correlate-method 'synctex)

(add-hook 'LaTeX-mode-hook
      (lambda()
        (add-to-list 'TeX-expand-list
             '("%q" skim-make-url))))

(defun skim-make-url () (concat
        (TeX-current-line)
        " "
        (expand-file-name (funcall file (TeX-output-extension) t)
            (file-name-directory (TeX-master-file)))
        " "
        (buffer-file-name)))

(setq TeX-view-program-list
  '(("Skim" "/Applications/Skim.app/Contents/SharedSupport/displayline %q")))
(setq TeX-view-program-selection '((output-pdf "Skim")))
(setq server-use-tcp t)
(server-start)
#+END_SRC
** Yorum Stili
#+BEGIN_SRC elisp :tangle no
(setq LaTeX-command-style '(("" "%(PDF)%(latex) -file-line-error %S%(PDFout)")))
#+END_SRC
** Cesitli Ayarlar
#+BEGIN_SRC elisp
(setq TeX-auto-save t)
(setq TeX-parse-self t)
(setq-default TeX-master nil)
(add-hook 'LaTeX-mode-hook 'visual-line-mode)
(add-hook 'LaTeX-mode-hook 'flyspell-mode)
(add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
(add-hook 'LaTeX-mode-hook 'turn-on-reftex)
(setq reftex-plug-into-AUCTeX t)
#+END_SRC
* org-mode
org-mode /.org/, /.org_archive/ ve /.txt/ icin varsayilan mode olsun. 
#+BEGIN_SRC elisp
(add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\|txt\\)$" . org-mode))
#+END_SRC
komutlari tuslara atayalim.
#+BEGIN_SRC elisp
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)
#+END_SRC
Ozellestirdigimiz komutlar
#+BEGIN_SRC elisp
;; Custom Key Bindings
(global-set-key (kbd "<f12>") 'org-agenda)
(global-set-key (kbd "<f5>") 'bh/org-todo)
(global-set-key (kbd "<S-f5>") 'bh/widen)
(global-set-key (kbd "<f7>") 'bh/set-truncate-lines)
(global-set-key (kbd "<f8>") 'org-cycle-agenda-files)
(global-set-key (kbd "<f9> <f9>") 'bh/show-org-agenda)
(global-set-key (kbd "<f9> b") 'bbdb)
(global-set-key (kbd "<f9> c") 'calendar)
(global-set-key (kbd "<f9> f") 'boxquote-insert-file)
(global-set-key (kbd "<f9> g") 'gnus)
(global-set-key (kbd "<f9> h") 'bh/hide-other)
(global-set-key (kbd "<f9> n") 'bh/toggle-next-task-display)
(global-set-key (kbd "<f9> w") 'widen)

(global-set-key (kbd "<f9> I") 'bh/punch-in)
(global-set-key (kbd "<f9> O") 'bh/punch-out)

(global-set-key (kbd "<f9> o") 'bh/make-org-scratch)

(global-set-key (kbd "<f9> r") 'boxquote-region)
(global-set-key (kbd "<f9> s") 'bh/switch-to-scratch)

(global-set-key (kbd "<f9> t") 'bh/insert-inactive-timestamp)
(global-set-key (kbd "<f9> T") 'bh/toggle-insert-inactive-timestamp)

(global-set-key (kbd "<f9> v") 'visible-mode)
(global-set-key (kbd "<f9> l") 'org-toggle-link-display)
(global-set-key (kbd "<f9> SPC") 'bh/clock-in-last-task)
(global-set-key (kbd "C-<f9>") 'previous-buffer)
(global-set-key (kbd "M-<f9>") 'org-toggle-inline-images)
(global-set-key (kbd "C-x n r") 'narrow-to-region)
(global-set-key (kbd "C-<f10>") 'next-buffer)
(global-set-key (kbd "<f11>") 'org-clock-goto)
(global-set-key (kbd "C-<f11>") 'org-clock-in)
(global-set-key (kbd "C-s-<f12>") 'bh/save-then-publish)
(global-set-key (kbd "C-c c") 'org-capture)

(defun bh/hide-other ()
  (interactive)
  (save-excursion
    (org-back-to-heading 'invisible-ok)
    (hide-other)
    (org-cycle)
    (org-cycle)
    (org-cycle)))

(defun bh/set-truncate-lines ()
  "Toggle value of truncate-lines and refresh window display."
  (interactive)
  (setq truncate-lines (not truncate-lines))
  ;; now refresh window display (an idiom from simple.el):
  (save-excursion
    (set-window-start (selected-window)
                      (window-start (selected-window)))))

(defun bh/make-org-scratch ()
  (interactive)
  (find-file "/tmp/publish/scratch.org")
  (gnus-make-directory "/tmp/publish"))

(defun bh/switch-to-scratch ()
  (interactive)
  (switch-to-buffer "*scratch*"))
#+END_SRC
** Ajanda Dosyalari

#+BEGIN_SRC elisp
(setq org-agenda-files (quote ("~/Dropbox/org")))
#+END_SRC 
** Gorevler
*** Gorev anahtar kelimeleri
#+BEGIN_SRC elisp
(setq org-todo-keywords
      (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
              (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)"  "MEETING"))))

(setq org-todo-keyword-faces
      (quote (("TODO" :foreground "red" :weight bold)
              ("NEXT" :foreground "blue" :weight bold)
              ("DONE" :foreground "forest green" :weight bold)
              ("WAITING" :foreground "orange" :weight bold)
              ("HOLD" :foreground "magenta" :weight bold)
              ("CANCELLED" :foreground "forest green" :weight bold)
              ("MEETING" :foreground "forest green" :weight bold))))

#+END_SRC
*** Hizli gorev durumu secimi
#+BEGIN_SRC elisp
(setq org-use-fast-todo-selection t)
(setq org-treat-S-cursor-todo-selection-as-state-change nil)
#+END_SRC
*** Gorev durumu degistirmek
#+BEGIN_SRC elisp
(setq org-todo-state-tags-triggers
      (quote (("CANCELLED" ("CANCELLED" . t))
              ("WAITING" ("WAITING" . t))
              ("HOLD" ("WAITING") ("HOLD" . t))
              (done ("WAITING") ("HOLD"))
              ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
              ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
              ("DONE" ("WAITING") ("CANCELLED") ("HOLD")))))
#+END_SRC
* Araclar
** autocomplete
otomatik tamamlama
#+BEGIN_SRC elisp
(require 'auto-complete-config)
(add-to-list 'ac-dictionary-directories "~/.emacs.d/ac-dict")
(defadvice ac-common-setup (after give-yasnippet-highest-priority activate)
  (setq ac-sources (delq 'ac-source-yasnippet ac-sources))
  (add-to-list 'ac-sources 'ac-source-yasnippet))
#+END_SRC
** git
Magit kullanalim
#+BEGIN_SRC elisp
  (require 'magit)
  (define-key global-map "\M-\C-g" 'magit-status)
#+END_SRC

** yasnippet
#+BEGIN_SRC elisp 
   (require 'yasnippet)
   (setq yas-snippet-dirs (append yas-snippet-dirs
                               '("~/Dropbox/yasnippet/latex/"
                                 "~/Dropbox/yasnippet/org/")))
   (yas-global-mode 1)
#+END_SRC
** Yazim kontrolu
   Then, we can use it like:

#+BEGIN_SRC elisp
  (setq ispell-personal-dictionary 
      (concat (getenv "HOME") "/Dropbox/dictionary-personal.txt"))

  (dolist (hook '(org-mode-hook))
    (add-hook hook (lambda () (flyspell-mode 1))))
#+END_SRC

   If I find any =text-mode= derived mode that I don't want to
   spell-check, then I need to use the following:

#+BEGIN_SRC elisp :tangle no
  (dolist (hook '(change-log-mode-hook log-edit-mode-hook org-agenda-mode-hook))
    (add-hook hook (lambda () (flyspell-mode -1))))
#+END_SRC
** popup
Popup menu kullanalim
#+BEGIN_SRC elisp :tangle no
(require 'popup)
#+END_SRC

Bazi kisayollar ekleyelim
#+BEGIN_SRC elisp  
(define-key popup-menu-keymap (kbd "M-n") 'popup-next)
(define-key popup-menu-keymap (kbd "TAB") 'popup-next)
(define-key popup-menu-keymap (kbd "<tab>") 'popup-next)
(define-key popup-menu-keymap (kbd "<backtab>") 'popup-previous)
(define-key popup-menu-keymap (kbd "M-p") 'popup-previous)
#+END_SRC

Bu fonksiyonlara bakmam lazim
#+BEGIN_SRC elisp 
(defun yas-popup-isearch-prompt (prompt choices &optional display-fn)
  (when (featurep 'popup)
    (popup-menu*
     (mapcar
      (lambda (choice)
        (popup-make-item
         (or (and display-fn (funcall display-fn choice))
             choice)
         :value choice))
      choices)
     :prompt prompt
     ;; start isearch mode immediately
     :isearch t
     )))

(setq yas-prompt-functions '(yas-popup-isearch-prompt yas-ido-prompt yas-no-prompt))

;; Completing point by some yasnippet key
(defun yas-ido-expand ()
  "Lets you select (and expand) a yasnippet key"
  (interactive)
    (let ((original-point (point)))
      (while (and
              (not (= (point) (point-min) ))
              (not
               (string-match "[[:space:]\n]" (char-to-string (char-before)))))
        (backward-word 1))
    (let* ((init-word (point))
           (word (buffer-substring init-word original-point))
           (list (yas-active-keys)))
      (goto-char original-point)
      (let ((key (remove-if-not
                  (lambda (s) (string-match (concat "^" word) s)) list)))
        (if (= (length key) 1)
            (setq key (pop key))
          (setq key (ido-completing-read "key: " list nil nil word)))
        (delete-char (- init-word original-point))
        (insert key)
        (yas-expand)))))
(define-key yas-minor-mode-map (kbd "<C-tab>")     'yas-ido-expand)
#+END_SRC
** svn
Macports ile yukledigimiz yeni svn'i gormesi icin
#+BEGIN_SRC elisp
  (setenv "PATH" (concat "/opt/local/bin:" (getenv "PATH")))
#+END_SRC
** pddl-mode
#+BEGIN_SRC elisp
(require 'PDDL-mode)
(add-to-list 'auto-mode-alist '("\\.pddl" . PDDL-mode))
#+END_SRC
** dot-mode
#+BEGIN_SRC elisp
(require 'dot-mode)
(add-hook 'find-file-hooks 'dot-mode-on)
#+END_SRC
* Technical Artifacts

  Before you can build this on a new system, make sure that you put
  the cursor over any of these properties, and hit: =C-c C-c=

#+DESCRIPTION: A literate programming version of my Emacs Initialization script, loaded by the .emacs file.
#+PROPERTY:    results silent
#+PROPERTY:    tangle ~/.emacs-ext.el
#+PROPERTY:    eval no-export
#+PROPERTY:    comments org
#+OPTIONS:     num:nil toc:nil todo:nil tasks:nil tags:nil
#+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:nil
#+INFOJS_OPT:  view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
